" for Regular VIM
" --------------------------------------
"  mkdir -p ~/.vim/autoload
"  curl -fLo ~/.vim/autoload/plug.vim \
"   https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
"
" or for NeoVIM
" --------------------------------------
"
" sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
"       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
"

au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=manual
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab


set encoding=utf-8



call plug#begin()
" nvim: Plug 'scrooloose/syntastic'
" let g:syntastic_yaml_checkers = ['yamllint']
"node.js and javascript
" make sure you have jshint installed: npm install -g jshint
Plug 'moll/vim-node'
Plug 'pangloss/vim-javascript'
Plug 'wookiehangover/jshint.vim'
" Additionally, after installing tern_for_vim, go to the plugin
" directory and run 'npm install'
Plug 'marijnh/tern_for_vim'
" Python
Plug 'nvie/vim-flake8'
Plug 'morhetz/gruvbox' 
" arduino syntax
Plug '4Evergreen4/vim-hardy'
" vim-go plugin for golang
" once installed, run :GoInstallBinaries and it'll install various go binaries
Plug 'fatih/vim-go'
"
" plugin for arduino-ino
" install 'ino' first!
Plug 'jplaut/vim-arduino-ino' 
" Basic usage:
" <Leader>ac - Compile the current sketch.
" <Leader>ad - Compile and deploy the current sketch.
" <Leader>as - Open a serial port in screen.

" other vim stuff
Plug 'tpope/vim-surround'
Plug 'lokaltog/vim-easymotion'
Plug 'tpope/vim-fugitive'
" problems with nvim : Plug 'tpope/vim-sensible'
Plug 'ervandew/supertab'
" For easy Hex editing
Plug 'fidian/hexmode'
Plug 'scrooloose/nerdtree'
Plug 'elzr/vim-json'
"Plug 'keith/tmux.vim' 
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'bling/vim-airline' 
Plug 'altercation/vim-colors-solarized'
Plug 'nightsense/stellarized'
Plug 'dracula/vim'
" Readme for CoC: https://github.com/neoclide/coc.nvim
" Install at least some of the language servers
" :CocInstall coc-pyright coc-sh coc-rust-analyzer 
" also make sure Python3 provider works by running :checkhealth command
"
" Install python provider with 'python3 -m pip install --user --upgrade pynvim`
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'mfussenegger/nvim-dap'
Plug 'mfussenegger/nvim-dap-python'
Plug 'kyazdani42/nvim-web-devicons' " Recommended (for coloured icons)
Plug 'akinsho/bufferline.nvim'
Plug 'Xuyuanp/scrollbar.nvim'



Plug 'chentau/marks.nvim'
" show marks - https://github.com/kshenoy/vim-signature
"Plug 'kshenoy/vim-signature'


call plug#end()


if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

"
" additionally for syntax checking/linting install:
" python:
"   * flake8 
"     install it in order to use vim-flake8
"     for example: pip install flake8
"     flake8 can then be invoked by 'F7' 
"
"   * pylint 
"     could also be used and is more strict
"
" bash:
"   * shellcheck
"     install shellcheck package
"   
" if you want to display airline tabline
" then uncomment the next line
" let g:airline#extensions#tabline#enabled = 1
"
"
"Open nerdtree by default if new empty vim is opened
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

set splitright "always slit to the right

set nocompatible 
syntax enable
set showmode " always show mode
set hlsearch

" enable fast redrawing and mouse
set ttyfast
set mouse=a

" install win32yank and use :checkhealth to make sure clipboard works
set clipboard+=unnamedplus

" for colors, see this awesome color table
" https://github.com/guns/xterm-color-table.vim


" Primitive way of detecting WSL2 based on Kernel version string
let wsl = 0
let uname = split(trim(system('uname -r')),'-')
if len(uname) == 4
    if uname[3] == "WSL2"
        let wsl = 1
    endif
endif


" Configuring some of the settings based on environment

if has('nvim')
    echo "Running NVim"
    set background=dark
    colorscheme gruvbox

    augroup ScrollbarInit
  autocmd!
  autocmd WinScrolled,VimResized,QuitPre * silent! lua require('scrollbar').show()
  autocmd WinEnter,FocusGained           * silent! lua require('scrollbar').show()
  autocmd WinLeave,BufLeave,BufWinLeave,FocusLost            * silent! lua require('scrollbar').clear()
augroup end


lua << EOF
require'marks'.setup {
  -- whether to map keybinds or not. default true
  default_mappings = true,
  -- which builtin marks to show. default {}
  builtin_marks = { ".", "<", ">", "^" },
  -- whether movements cycle back to the beginning/end of buffer. default true
  cyclic = true,
  -- whether the shada file is updated after modifying uppercase marks. default false
  force_write_shada = false,
  -- how often (in ms) to redraw signs/recompute mark positions. 
  -- higher values will have better performance but may cause visual lag, 
  -- while lower values may cause performance penalties. default 150.
  refresh_interval = 250,
  -- sign priorities for each type of mark - builtin marks, uppercase marks, lowercase
  -- marks, and bookmarks.
  -- can be either a table with all/none of the keys, or a single number, in which case
  -- the priority applies to all marks.
  -- default 10.
  sign_priority = { lower=10, upper=15, builtin=8, bookmark=20 },
  -- disables mark tracking for specific filetypes. default {}
  excluded_filetypes = {},
  -- marks.nvim allows you to configure up to 10 bookmark groups, each with its own
  -- sign/virttext. Bookmarks can be used to group together positions and quickly move
  -- across multiple buffers. default sign is '!@#$%^&*()' (from 0 to 9), and
  -- default virt_text is "".
  bookmark_0 = {
    sign = "âš‘",
    virt_text = "hello world"
  },
  mappings = {}
}
EOF

lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "all",
  ignore_install = { "javascript", "fortran", "verilog", "haskell" },

  highlight = { enable = true },
  indent = { enable = true },
}
EOF

lua << EOF
vim.opt.termguicolors = true
require("bufferline").setup{}
EOF
endif

if has('mac')
    echo "Running on a Mac"
elseif has('linux')
    if wsl == 1
        echo "Running on WSL2"
        set background=dark
        colorscheme gruvbox
    else
        echo "Running on generic Linux"
        set background=dark
        let g:solarized_termcolors=256
        set term=xterm-256color
        colorscheme solarized
    endif
endif

hi Search ctermfg=31 ctermbg=157
highlight OverLength ctermbg=red ctermfg=white
" Color column can be annoying so I use OverLenght highlight instead
"set colorcolumn=81
"highlight ColorColumn ctermbg=DarkGray

set backspace =2
set visualbell
"max line length should be no more than 80 characters
"highlight the 80th character and draw a vertical line
"at 81st character
match OverLength /\%80v.\+/

set cursorline
set smartindent

" smartindent does nothing useful for python 
" also commented out lines don't get indented
" so the solution is to disable autoindenting for python scripts
au! FileType python setl nosmartindent

set number
set ruler
set showmatch
set expandtab
set smarttab autoindent
set tabstop=4 
set shiftwidth=4 
set softtabstop=4 
set shiftround 

" keyboard shortcuts
nnoremap <F5> :set invpaste paste?<Enter>
imap <F5> <C-O><F5>
set pastetoggle=<F5>

highlight Comment ctermfg=gray guifg=gray
"make ctrl+c ctrl+v work in gvim
nmap <C-V> "+gP
imap <C-V> <ESC><C-V>i
vmap <C-C> "+y 

" some shortcuts for managing todo lists
imap <C-t> [ ] 
nmap <C-t> :s/\[\s\]/\[x\]/

map <C-n> :NERDTreeToggle<CR>
map <C-f> :NERDTreeFind<CR>

" custom commands
" run ./test.sh
command T !./test.sh
" run pylint on the current file
command L ! pylint ./%
" execute the script
command R !./%
" execute as a python script
command P ! python ./%
" validate puppet manifest
" remap ; to : to avoid typing SHIFT + ; 
nnoremap ; :
" map space to center screen on current line
nmap <space> zz


" indenting for YAML
filetype plugin indent on
autocmd FileType yaml setl indentkeys-=<:>
autocmd FileType yaml setl shiftwidth=2
autocmd FileType yaml setl tabstop=2


noremap gh :call CocActionAsync('doHover')<CR>
nnoremap gd :call CocActionAsync('jumpDefinition')<CR>
nnoremap M :MarksListAll<CR>
