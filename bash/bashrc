# shellcheck shell=bash
# vim: filetype=sh

# to avoid breaking SCP transfers only apply .bashrc to interactive sessions
if tty -s; then

# Create arrays to track missing tools and warnings
MISSING_TOOLS=()
WARNINGS=()

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to add a missing tool to the list
add_missing_tool() {
    MISSING_TOOLS+=("$1")
}

# Function to add a warning message
add_warning() {
    WARNINGS+=("$1")
}

if [ -e "$HOME/.colors" ]; then
    source "$HOME/.colors"
fi

if [ -e "$HOME/.functions" ]; then
    source "$HOME/.functions"
fi

# need colors and functions loaded to print this
print_load ".bashrc"

if [ -e "$HOME/.bash_aliases" ]; then
    source "$HOME/.bash_aliases"
fi

# before we go and set up other stuff, need to find the github directory first,
# this depends on platform, but normally I try to keep it in either ~/Documents/github or ~/github
if [ -d "${HOME}/Documents/github" ]; then
    GITHUB_DIRECTORY=${HOME}/Documents/github
    echo "$GREEN OK $DEFAULT GitHub directory found at: ${GITHUB_DIRECTORY}"
elif [ -d "${HOME}/github" ]; then
     GITHUB_DIRECTORY=${HOME}/github
     echo "$GREEN OK $DEFAULT GitHub directory found at: ${GITHUB_DIRECTORY}"
elif [ -d "${HOME}/git/github" ]; then
     GITHUB_DIRECTORY=${HOME}/git/github
     echo "$GREEN OK $DEFAULT GitHub directory found at: ${GITHUB_DIRECTORY}"
else 
    add_warning "Could not find your github directory"
fi

if [ -e "$HOME/.ansiblerc" ]; then
    source "$HOME/.ansiblerc"
fi

if [ -e "$HOME/.fzf.bash" ]; then
    source "$HOME/.fzf.bash"
fi

if [ -e "$HOME/.azure.completion" ]; then
    source "$HOME/.azure.completion"
fi

# brew install bash-completion
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

if command_exists kubectl; then
    source <(kubectl completion bash 2>/dev/null)
fi

# Ensure en_US.UTF-8 locale is always available and configured
ensure_utf8_locale() {
    local LOCALE="en_US.UTF-8"
    if ! locale -a | grep -qi "$(echo ${LOCALE} | sed 's/-//')"; then
        echo "Locale ${LOCALE} missing."
        read -p "Do you want to generate ${LOCALE}? [y/N]: " confirm
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            echo "Locale generation aborted."
            return
        fi

        if [ -x "$(command -v locale-gen)" ]; then
            sudo locale-gen ${LOCALE}
        elif [ -x "$(command -v localedef)" ]; then
            sudo localedef -v -c -i en_US -f UTF-8 ${LOCALE}
        else
            echo "No supported locale generation command found (locale-gen/localedef)."
            return
        fi

        echo "Locale ${LOCALE} generated."
    else
        echo "Locales are OK: ${LOCALE} is already configured."
    fi
    export LANG=${LOCALE}
    export LOCALE=${LOCALE}
    unset LC_ALL
}

ensure_utf8_locale

# common settings
# big hist file is good for lazy (or forgetful) admins
HISTFILESIZE=20000
HISTSIZE=20000
# add timestamps to history entries
HISTTIMEFORMAT="[ %d.%m.%y %T ] "
# no point in saving dupes
HISTCONTROL=ignoredups
PS1='[\u@\h \w]\$ '

if [ -d /opt/libressl/lib ]; then
    export LD_LIBRARY_PATH=/opt/libressl/lib
fi

if [ -d "${HOME}/bin" ]; then
    PATH=${HOME}/bin:$PATH
fi

if [ -d "${HOME}/.local/bin" ]; then
    PATH=${HOME}/.local/bin:$PATH
fi

if [ -d "${HOME}/opt/bin" ]; then
    PATH=${HOME}/opt/bin:$PATH
fi

if [ -d "${HOME}/.cargo/bin" ]; then
    PATH=${HOME}/.cargo/bin:$PATH
fi

if [ -d "/opt/bin" ]; then
    PATH=/opt/bin:$PATH
fi

export PATH

if [ "$OSTYPE" == "freebsd11.0" ] || [ "$OSTYPE" == "freebsd10.1" ]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        add_warning "Please consider installing 'most' or 'less'"
    fi
elif [ "$OSTYPE" == "linux-gnu" ]; then
    if [ -x /usr/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        add_warning "Please consider installing 'most' or 'less'"
    fi
    
    # Add Ghostty terminal support for Linux
    if [[ "$TERM_PROGRAM" == "ghostty" ]]; then
        if command_exists setup_ghostty; then
            setup_ghostty
        else
            add_warning "Ghostty terminal detected but setup_ghostty function not found"
        fi
    fi
elif [[ "$OSTYPE" == darwin* ]]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        add_warning "Please consider installing 'most' or 'less'"
    fi

    if [[ "$TERM_PROGRAM" == "ghostty" ]]; then
        if command_exists setup_ghostty; then
            setup_ghostty
        else
            add_warning "Ghostty terminal detected but setup_ghostty function not found"
        fi
    fi
fi

export HISTFILESIZE HISTSIZE HISTTIMEFORMAT PS1
# some basic env variables
export VAGRANT_DEFAULT_PROVIDER=virtualbox
export EDITOR="vim"

SSH_ENV="$HOME/.ssh/environment"

function start_agent {
    echo -e "${YELLOW}Starting new ssh-agent${DEFAULT}"
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add
}

function ssh_agent_status {
    echo -e "${BLUE}SSH Agent Status:${DEFAULT}"
    echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
    echo "SSH_AGENT_PID=$SSH_AGENT_PID"
    echo "SSH_CONNECTION=$SSH_CONNECTION"
    
    if [[ -n "$SSH_AUTH_SOCK" && -S "$SSH_AUTH_SOCK" ]]; then
        echo -e "${GREEN}Socket exists${DEFAULT}"
        ssh-add -l
    else
        echo -e "${RED}No valid SSH_AUTH_SOCK${DEFAULT}"
    fi
    
    if [ -f "${SSH_ENV}" ]; then
        echo -e "${GREEN}Environment file exists${DEFAULT}"
        grep -v "^#" "${SSH_ENV}"
    else
        echo -e "${RED}No environment file${DEFAULT}"
    fi
}

# Improved SSH agent handling
# First check if we have a forwarded agent (SSH_AUTH_SOCK exists and is valid)
if [[ -n "$SSH_AUTH_SOCK" && -S "$SSH_AUTH_SOCK" ]]; then
    # We have a forwarded agent socket
    if ssh-add -l &>/dev/null; then
        echo -e "${GREEN}OK${DEFAULT} Using forwarded SSH agent with keys."
    else
        # Exit code 1 means agent exists but has no keys
        # Exit code 2 means agent is not running or not accessible
        if [ $? -eq 1 ]; then
            echo -e "${YELLOW}WARN${DEFAULT} Using forwarded SSH agent (no keys)."
        else
            echo -e "${YELLOW}WARN${DEFAULT} SSH_AUTH_SOCK exists but agent not responding. Clearing variable."
            unset SSH_AUTH_SOCK
        fi
    fi
fi

# If no forwarded agent is working, try to use or start a local agent
if [[ -z "$SSH_AUTH_SOCK" || ! -S "$SSH_AUTH_SOCK" ]]; then
    # Source SSH settings if they exist
    if [ -f "${SSH_ENV}" ]; then
        . "${SSH_ENV}" > /dev/null
        # Check if agent is running
        if ! kill -0 "$SSH_AGENT_PID" 2>/dev/null; then
            echo -e "${YELLOW}Stale ssh-agent found. Restarting...${DEFAULT}"
            start_agent
        else
            # Agent is running, check if keys are loaded
            if ssh-add -l &>/dev/null; then
                echo -e "${GREEN}OK${DEFAULT} Local SSH agent running with keys."
            else
                # Exit code 1 means agent exists but has no keys
                # Exit code 2 means agent is not running or not accessible
                if [ $? -eq 1 ]; then
                    echo -e "${YELLOW}WARN${DEFAULT} Local SSH agent has no keys. Loading now."
                    ssh-add
                else
                    echo -e "${RED}ERROR${DEFAULT} Local SSH agent not responding properly."
                fi
            fi
        fi
    else
        # No agent environment file exists
        if [[ -z "$SSH_CONNECTION" ]]; then
            # Only start a new agent if we're not in an SSH session
            start_agent
        else
            echo -e "${YELLOW}WARN${DEFAULT} SSH forwarding not working. No local agent started in SSH session."
            echo -e "       Try reconnecting with 'ssh -A' for agent forwarding."
        fi
    fi
fi

# If you need to troubleshoot SSH agent issues, run the ssh_agent_status function
# ssh_agent_status

# setup golang environment
if command_exists go; then
    export GOPATH=$HOME/golang
    if [ ! -e "$GOPATH" ]; then
        echo "Your GOPATH is missing, so I will create it"
        mkdir "$GOPATH"
    fi
    echo "Setting up \$GOPATH to $GOPATH"
fi

if [ -e "$HOME/.bash_mac" ]; then
    source "$HOME/.bash_mac"
    print_ok ".bash_mac loaded"
fi

chmod -v 0640 ~/.ssh/config 2>/dev/null
mkdir -p  ~/.ssh/cm/

# check if sudo session is already active
# this makes sense on machines where /etc/sudoers has timestamp_type="global"
if sudo -vn 2> /dev/null; then
    echo "You have an active sudo session"
fi

# end of tty conditional
fi

# Add Ghostty terminal detection for SSH sessions
if [[ -n "$SSH_CONNECTION" && "$TERM_PROGRAM" == "ghostty" ]]; then
    # We're in an SSH session with Ghostty terminal
    if command_exists setup_ghostty; then
        setup_ghostty
    else
        # Fallback if the function isn't available
        export TERM=xterm-256color
        export COLORTERM=truecolor
        echo "$GREEN OK $DEFAULT Detected Ghostty terminal over SSH"
    fi
fi

# Load broot if available
if [ -e "$HOME/.config/broot/launcher/bash/br" ]; then
    source "$HOME/.config/broot/launcher/bash/br"
else
    add_missing_tool "broot"
fi

# Load cargo environment if available
if [ -e "$HOME/.cargo/env" ]; then 
    . "$HOME/.cargo/env" 2>/dev/null
else
    add_missing_tool "cargo"
fi

if [ -e "$HOME/.extrarc" ]; then 
    . "$HOME/.extrarc"
fi

# Load oh-my-posh if available
if command_exists oh-my-posh; then
    eval "$(oh-my-posh --init --shell bash --config ~/.fxposh.json)"
else
    add_missing_tool "oh-my-posh"
fi

# Load starship if available
if command_exists starship; then
    eval "$(starship init bash)"
else
    add_missing_tool "starship"
fi

# Load direnv if available
if [ -e "$HOME/opt/bin/direnv" ] || [ -e "/usr/bin/direnv" ] || command_exists direnv; then
    eval "$(direnv hook bash 2>/dev/null)"
else
    add_missing_tool "direnv"
fi

# Load Azure CLI completion if available
if [ -e "/etc/bash_completion.d/azure-cli" ]; then
    source /etc/bash_completion.d/azure-cli
else
    add_missing_tool "azure-cli"
fi

# Display a summary of missing tools at the end
if [ ${#MISSING_TOOLS[@]} -gt 0 ]; then
    echo -e "${YELLOW}Missing tools:${DEFAULT} ${MISSING_TOOLS[*]}"
fi

if [ ${#WARNINGS[@]} -gt 0 ]; then
    echo -e "${YELLOW}Warnings:${DEFAULT}"
    for warning in "${WARNINGS[@]}"; do
        echo "  - $warning"
    done
fi
