# shellcheck shell=bash
# vim: filetype=sh

# to avoid breaking SCP transfers only apply .bashrc to interactive sessions
if tty -s; then

if [ -e "$HOME/.colors" ]; then
    source "$HOME/.colors"
fi

if [ -e "$HOME/.functions" ]; then
    source "$HOME/.functions"
fi

# need colors and functions loaded to print this
print_load ".bashrc"

if [ -e "$HOME/.bash_aliases" ]; then
    source "$HOME/.bash_aliases"
fi

# before we go and set up other stuff, need to find the github directory first,
# this depends on platform, but normally I try to keep it in either ~/Documents/github or ~/github
if [ -d "${HOME}/Documents/github" ]; then
    GITHUB_DIRECTORY=${HOME}/Documents/github
    echo "$GREEN OK $DEFAULT GitHub directory found at: ${GITHUB_DIRECTORY}"
elif [ -d "${HOME}/github" ]; then
     GITHUB_DIRECTORY=${HOME}/github
     echo "$GREEN OK $DEFAULT GitHub directory found at: ${GITHUB_DIRECTORY}"
elif [ -d "${HOME}/git/github" ]; then
     GITHUB_DIRECTORY=${HOME}/github
     echo "$GREEN OK $DEFAULT GitHub directory found at: ${GITHUB_DIRECTORY}"
else 
    echo "$YELLOW WARN $DEFAULT Could not find your github directory. This is sub optimal."
fi



if [ -e "$HOME/.ansiblerc" ]; then
    source "$HOME/.ansiblerc"
fi

if [ -e "$HOME/.fzf.bash" ]; then
    source "$HOME/.fzf.bash"
fi

# 
# azure --completion >> ~/.azure.completion
#
if [ -e "$HOME/.azure.completion" ]; then
    source "$HOME/.azure.completion"
fi

# brew install bash-completion
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

[ -f /usr/local/bin/kubectl ] && source <(kubectl completion bash)

# set up the environment in a docker container or WSL session
boot2docker=$(uname -r |grep -c docker) # docker
moby=$(uname -r |grep -c moby) # docker
wsl=$(uname -r | grep -c Microsoft ) # Windows Subsystem for Linux
if (( boot2docker == 1 || moby == 1 || wsl == 1)); then
    echo "Environment recognized, great stuff."
    echo "Setting locale: LC_ALL=C"
    export LC_ALL=C
    
    # check if ssh-agent is already running, if not, start one up
    if pgrep ssh-agent > /dev/null 2>&1; then
        echo "ssh-agent already running"
        source ~/.ssh-agent.env
    else
        if [ -S ~/.ssh-agent.sock ]; then
            echo "ssh-agent socket exists but agent itself not running"
            echo -n "removing old ssh-agent socket "
            rm -v ~/.ssh-agent.sock
        fi
        echo "Starting ssh-agent"
        ssh-agent -a ~/.ssh-agent.sock > ~/.ssh-agent.env
        if pgrep ssh-agent > /dev/null 2>&1; then
            source ~/.ssh-agent.env
            echo "Please add your key"
            ssh-add
        else
            echo "Could not start ssh-agent"
        fi
    fi
else
    if [ "$OSTYPE" == "linux-gnu" ] || [ "$OSTYPE" == "linux-gnueabihf" ]; then
        # shellcheck disable=SC2030
        locale_output=$(export LC_ALL=en_US.UTF-8 2>&1 | wc -l)
        if ((locale_output > 0)); then
            # shellcheck disable=SC2031
            echo "$YELLOW WARN $DEFAULT Are you missing locales? Consider updating '/etc/locale.gen' by adding 'en_US.UTF-8 UTF-8' and then running 'sudo locale-gen $LC_ALL'"
        else
            echo "$GREEN OK $DEFAULT locale set to en_US.UTF-8"
        fi
        export LANG=en_US.UTF-8
    fi
fi

# common settings
# big hist file is good for lazy (or forgetful) admins
HISTFILESIZE=20000
HISTSIZE=20000
# add timestamps to history entries
HISTTIMEFORMAT="[ %d.%m.%y %T ] "
# no point in saving dupes
HISTCONTROL=ignoredups
PS1='[\u@\h \w]\$ '

if [ -d /opt/libressl/lib ]; then
    export LD_LIBRARY_PATH=/opt/libressl/lib
fi

if [ -d "${HOME}/bin" ]; then
    PATH=${HOME}/bin:$PATH
fi

if [ -d "${HOME}/.local/bin" ]; then
    PATH=${HOME}/.local/bin:$PATH
fi

if [ -d "${HOME}/opt/bin" ]; then
    PATH=${HOME}/opt/bin:$PATH
fi

if [ -d "${HOME}/.cargo/bin" ]; then
    PATH=${HOME}/.cargo/bin:$PATH
fi

if [ -d "/opt/bin" ]; then
    PATH=/opt/bin:$PATH
fi

# bin-scripts should be in either ~/opt or ~/github
if [ -d "${HOME}/opt/bin-scripts" ]; then
    PATH=${HOME}/opt/bin-scripts/laptop:$PATH
    PATH=${HOME}/opt/bin-scripts:$PATH
fi
if [ -d "${HOME}/github/bin-scripts" ]; then
    PATH=${HOME}/github/bin-scripts/laptop:$PATH
    PATH=${HOME}/github/bin-scripts:$PATH
fi

# if it exists, add ${HOME}/opt/bin to path 
if [ -d "${HOME}/opt/bin" ]; then
    PATH=${HOME}/opt/bin:$PATH
fi


# add local python bin dir to path on OSX if it exists
if [ -d "${HOME}/Library/Python/2.7/bin" ]; then
    PATH=${HOME}/Library/Python/2.7/bin:$PATH 
    echo "${HOME}/Library/Python/2.7/bin added"
fi

export PATH

if [ "$OSTYPE" == "freebsd11.0" ] || [ "$OSTYPE" == "freebsd10.1" ]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        print_warn "Please consider installing 'most' or 'less'"
    fi
elif [ "$OSTYPE" == "linux-gnu" ]; then
    if [ -x /usr/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        print_warn "Please consider installing 'most' or 'less'"
    fi
elif [ "$OSTYPE" == "darwin18" ]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        print_warn "Please consider installing 'most' or 'less'"
    fi
fi
export HISTFILESIZE HISTSIZE HISTTIMEFORMAT PS1
# some basic env variables
export VAGRANT_DEFAULT_PROVIDER=virtualbox
export EDITOR="vim"




if [ "$OSTYPE" == "cygwin" ]; then
    echo "Running in cygwin, brawe man."
    if ssh-add -L > /dev/null; then
        echo "SSH agent seems to be OK"
    else
        echo "Let me set up ssh agent for you sir"
        ssh-agent head -n 2 > .ssh_agent
        source .ssh_agent
        ssh-add
    fi
    
fi

# make sure ssh-agent is running and is being used
if ! pgrep ssh-agent > /dev/null 2>&1; then
    echo "$YELLOW WARN $DEFAULT ssh agent not running, let's start it up"
    ssh-agent | head -n 2 > .ssh_agent
fi 

if [ -e ~/.ssh_agent ]; then
    source ~/.ssh_agent
fi

# There should be only one ssh-agent running
ssh_agent_count=$(pgrep -x ssh-agent | wc -l)
if (( ssh_agent_count > 1)); then
    echo "$YELLOW WARN $DEFAULT Too many ssh agents running!"
fi

# Let's check if the SSH_AGENT_PID actually refers to an existing process
if ps -p "$SSH_AGENT_PID" > /dev/null; then
    echo "$GREEN OK $DEFAULT SSH agent is alive"
else
    echo "$YELLOW WARN $DEFAULT SSH agent process $SSH_AGENT_PID is NOT running!"
fi

# Add ssh-key to ssh-agent if this is one of the workstations
# I assume that ssh-agent is started by something else (like .xinitrc).
if [ -n "$SSH_AGENT_PID" ]; then
    if ssh-add -L > /dev/null; then
        echo "$GREEN OK $DEFAULT SSH key already loaded"
    else
      echo "Adding ssh key to ssh-agent"
        ssh-add
    fi
else
    echo "$YELLOW WARN $DEFAULT SSH_AGENT_PID variable does not exist"
fi


if [ -e "$SSH_AUTH_SOCK" ]; then
    if [[ -e ~/.ssh/ssh_auth_sock ]]; then 
        echo "$GREEN OK $DEFAULT SSH_AUTH_SOCK is OK"
    else
        echo "Setting up SSH_AUTH_SOCK"
        ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
    fi
fi




alias activatevenv="source venv/bin/activate"
if [ -e /usr/local/bin/docker-machine ]; then
    if docker-machine status default| grep Running > /dev/null; then
        echo "Docker machine $GREEN OK $DEFAULT"
        echo "Run 'denv' to activate Docker environment"
        echo "Docker aliases:"
        echo -e "\tdshell\t- shellbox"
        alias denv="eval \"$(docker-machine env default)\""
        alias dshell="docker run -ti fxlv/debian_wheezy:shellbox bash"
    else
        echo "Docker machine $RED not available $DEFAULT"
    fi
fi

# if there's ssh-when-up.py present, use that for SSHing
# however sometimes pure ssh is needed and for theses cases
# create an alias 'ssh_original' 
if type ssh-when-up.py > /dev/null 2> /dev/null; then
    if [ -e /bin/ssh ]; then
        full_ssh_path=/bin/ssh
    fi

    if [ -e /usr/bin/ssh ]; then 
        full_ssh_path=/usr/bin/ssh
    fi
    alias ssh_original="$full_ssh_path"
    echo "Using ssh-when-up.py script instead of ssh"
    alias ssh="ssh-when-up.py"

fi

# setup golang environment
if type go > /dev/null 2> /dev/null; then
    export GOPATH=$HOME/golang
    if [ ! -e "$GOPATH" ]; then
        echo "Your GOPATH is missing, so I will create it"
        mkdir "$GOPATH"
    fi
    echo "Setting up \$GOPATH to $GOPATH"
fi

# install powerline:  pip install --user git+git://github.com/powerline/powerline
# follow the powerline docs, to also intall the fonts
# https://powerline.readthedocs.io/en/latest/installation/linux.html

powerlinesh="/Users/fx/Library/Python/2.7/lib/python/site-packages/powerline/bindings/bash/powerline.sh"
powerlinesh_linux="./.local/lib/python3.9/site-packages/powerline/bindings/bash/powerline.sh"

if [ -e "$powerlinesh" ]; then
. /Users/fx/Library/Python/2.7/lib/python/site-packages/powerline/bindings/bash/powerline.sh
fi

if [ -e "$powerlinesh_linux" ]; then
    . $powerlinesh_linux
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash


chmod -v 0640 ~/.ssh/config
mkdir -p  ~/.ssh/cm/

# check if sudo session is already active
# this makes sense on machines where /etc/sudoers has timestamp_type="global"
if sudo -vn 2> /dev/null; then
    echo "You have an active sudo session"
fi



if [ -e "$HOME/.bash_mac" ]; then
    source "$HOME/.bash_mac"
    print_ok ".bash_mac loaded"
fi

# end of tty conditional
fi


# install broot from https://github.com/Canop/broot
source /home/fx/.config/broot/launcher/bash/br
