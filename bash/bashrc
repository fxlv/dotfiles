# shellcheck shell=bash
# vim: filetype=sh

# to avoid breaking SCP transfers only apply .bashrc to interactive sessions
if tty -s; then


if [ -e "$HOME/.colors" ]; then
    source "$HOME/.colors"
fi
if [ -e "$HOME/.bash_aliases" ]; then
    source "$HOME/.bash_aliases"
fi
if [ -e "$HOME/.bash_mac" ]; then
    source "$HOME/.bash_mac"
    echo ".bash_mac loaded"
fi
if [ -e "$HOME/.bash_mac" ]; then
    source "$HOME/.bash_mac"
fi
if [ -e "$HOME/.ansiblerc" ]; then
    source "$HOME/.ansiblerc"
fi
if [ -e "$HOME/.fzf.bash" ]; then
    source "$HOME/.fzf.bash"
fi
# 
# azure --completion >> ~/.azure.completion
#
if [ -e "$HOME/.azure.completion" ]; then
    source "$HOME/.azure.completion"
fi

# set up the environment in a docker container or WSL session
boot2docker=$(uname -r |grep -c docker) # docker
moby=$(uname -r |grep -c moby) # docker
wsl=$(uname -r | grep -c Microsoft ) # Windows Subsystem for Linux
if (( boot2docker == 1 || moby == 1 || wsl == 1)); then
    echo "Environment recognized, great stuff."
    echo "Setting locale: LC_ALL=C"
    export LC_ALL=C
    
    # check if ssh-agent is already running, if not, start one up
    if pgrep ssh-agent; then
        echo "ssh-agent already running"
        source ~/.ssh-agent.env
    else
        if [ -S ~/.ssh-agent.sock ]; then
            echo "ssh-agent socket exists but agent itself not running"
            echo -n "removing old ssh-agent socket "
            rm -v ~/.ssh-agent.sock
        fi
        echo "Starting ssh-agent"
        ssh-agent -a ~/.ssh-agent.sock > ~/.ssh-agent.env
        if pgrep ssh-agent; then
            source ~/.ssh-agent.env
            echo "Please add your key"
            ssh-add
        else
            echo "Could not start ssh-agent"
        fi
    fi
else
    export LC_ALL=en_US.UTF-8
    export LANG=en_US.UTF-8
fi

# common settings
# big hist file is good for lazy (or forgetful) admins
HISTFILESIZE=20000
HISTSIZE=20000
# add timestamps to history entries
HISTTIMEFORMAT="[ %d.%m.%y %T ] "
# no point in saving dupes
HISTCONTROL=ignoredups
PS1='[\u@\h \w]\$ '

if [ -d /opt/libressl/lib ]; then
    export LD_LIBRARY_PATH=/opt/libressl/lib
fi

if [ -d "${HOME}/bin" ]; then
    PATH=${HOME}/bin:$PATH
fi

if [ -d "${HOME}/.local/bin" ]; then
    PATH=${HOME}/.local/bin:$PATH
fi

if [ -d "${HOME}/opt/bin" ]; then
    PATH=${HOME}/opt/bin:$PATH
fi

if [ -d "/opt/bin" ]; then
    PATH=/opt/bin:$PATH
fi

# bin-scripts should be in either ~/opt or ~/github
if [ -d "${HOME}/opt/bin-scripts" ]; then
    PATH=${HOME}/opt/bin-scripts/laptop:$PATH
    PATH=${HOME}/opt/bin-scripts:$PATH
fi
if [ -d "${HOME}/github/bin-scripts" ]; then
    PATH=${HOME}/github/bin-scripts/laptop:$PATH
    PATH=${HOME}/github/bin-scripts:$PATH
fi

# if it exists, add ${HOME}/opt/bin to path 
if [ -d "${HOME}/opt/bin" ]; then
    PATH=${HOME}/opt/bin:$PATH
fi


# add local python bin dir to path on OSX if it exists
if [ -d "${HOME}/Library/Python/2.7/bin" ]; then
    PATH=${HOME}/Library/Python/2.7/bin:$PATH 
    echo "${HOME}/Library/Python/2.7/bin added"
fi

export PATH

if [ "$OSTYPE" == "freebsd11.0" ] || [ "$OSTYPE" == "freebsd10.1" ]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        echo "Please consider installing 'most' or 'less'"
    fi
elif [ "$OSTYPE" == "linux-gnu" ]; then
    if [ -x /usr/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        echo "Please consider installing 'most' or 'less'"
    fi
elif [ "$OSTYPE" == "darwin15" ]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        echo "Please consider installing 'most' or 'less'"
    fi
fi
export HISTFILESIZE HISTSIZE HISTTIMEFORMAT PS1
# some basic env variables
export VAGRANT_DEFAULT_PROVIDER=virtualbox
export EDITOR="vim"




if [ "$OSTYPE" == "cygwin" ]; then
    echo "Running in cygwin, brawe man."
    if ssh-add -L > /dev/null; then
        echo "SSH agent seems to be OK"
    else
        echo "Let me set up ssh agent for you sir"
        ssh-agent > .ssh_agent
        source .ssh_agent
        ssh-add
    fi
    
fi

# make sure ssh-agent is running and is being used
if ! pgrep ssh-agent; then
    echo "ssh agent not running, let's start it up"
    ssh-agent > .ssh_agent
fi 

if [ -e ~/.ssh_agent ]; then
    source ~/.ssh_agent
fi

# Add ssh-key to ssh-agent if this is one of the workstations
# I assume that ssh-agent is started by something else (like .xinitrc).
if [ -n "$SSH_AGENT_PID" ]; then
    if ssh-add -L > /dev/null; then
        echo "SSH key already loaded"
    else
      echo "Adding ssh key to ssh-agent"
        ssh-add
    fi
else
    echo "SSH_AGENT_PID variable does not exist"
fi



# avoid breaking SCP
if [ "$SSH_TTY" == "darwin15" ] || [ "$DESKTOP_SESSION" == "darwin15" ] || [ "$OSTYPE" == "darwin15" ]; then
    echo ".bashrc loaded"
fi


if [ -e "$SSH_AUTH_SOCK" ]; then
    if [[ -e ~/.ssh/ssh_auth_sock ]]; then 
        echo "SSH_AUTH_SOCK is OK"
    else
        echp "Setting up SSH_AUTH_SOCK"
        ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
    fi
fi



alias activatevenv="source venv/bin/activate"
if [ -e /usr/local/bin/docker-machine ]; then
    if docker-machine status default| grep Running > /dev/null; then
        echo "Docker machine $GREEN OK $DEFAULT"
        echo "Run 'denv' to activate Docker environment"
        echo "Docker aliases:"
        echo -e "\tdshell\t- shellbox"
        alias denv="eval \"$(docker-machine env default)\""
        alias dshell="docker run -ti fxlv/debian_wheezy:shellbox bash"
    else
        echo "Docker machine $RED not available $DEFAULT"
    fi
fi

# if there's ssh-when-up.py present, use that for SSHing
# however sometimes pure ssh is needed and for theses cases
# create an alias 'ssh_original' 
if type ssh-when-up.py > /dev/null 2> /dev/null; then
    if [ -e /bin/ssh ]; then
        full_ssh_path=/bin/ssh
    fi

    if [ -e /usr/bin/ssh ]; then 
        full_ssh_path=/usr/bin/ssh
    fi
    alias ssh_original="$full_ssh_path"
    echo "Using ssh-when-up.py script instead of ssh"
    alias ssh="ssh-when-up.py"

fi

# setup golang environment
if type go > /dev/null 2> /dev/null; then
    export GOPATH=$HOME/golang
    if [ ! -e "$GOPATH" ]; then
        echo "Your GOPATH is missing, so I will create it"
        mkdir "$GOPATH"
    fi
    echo "Setting up \$GOPATH to $GOPATH"
fi

# install powerline:  pip install --user git+git://github.com/powerline/powerline
powerlinesh="/Users/fx/Library/Python/2.7/lib/python/site-packages/powerline/bindings/bash/powerline.sh"
powerlinesh_linux="./.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh"

if [ -e "$powerlinesh" ]; then
. /Users/fx/Library/Python/2.7/lib/python/site-packages/powerline/bindings/bash/powerline.sh
fi

if [ -e "$powerlinesh_linux" ]; then
    . $powerlinesh_linux
fi

# end of tty conditional
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash


chmod -v 0640 ~/.ssh/config
mkdir -p  ~/.ssh/cm/

# check if sudo session is already active
# this makes sense on machines where /etc/sudoers has timestamp_type="global"
if sudo -vn 2> /dev/null; then
    echo "You have an active sudo session"
fi