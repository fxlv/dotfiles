# shellcheck shell=bash
# vim: filetype=sh

# to avoid breaking SCP transfers only apply .bashrc to interactive sessions
if tty -s; then

if [ -e "$HOME/.colors" ]; then
    source "$HOME/.colors"
fi

if [ -e "$HOME/.functions" ]; then
    source "$HOME/.functions"
fi

# need colors and functions loaded to print this
print_load ".bashrc"

if [ -e "$HOME/.bash_aliases" ]; then
    source "$HOME/.bash_aliases"
fi

# before we go and set up other stuff, need to find the github directory first,
# this depends on platform, but normally I try to keep it in either ~/Documents/github or ~/github
if [ -d "${HOME}/Documents/github" ]; then
    GITHUB_DIRECTORY=${HOME}/Documents/github
    echo "$GREEN OK $DEFAULT GitHub directory found at: ${GITHUB_DIRECTORY}"
elif [ -d "${HOME}/github" ]; then
     GITHUB_DIRECTORY=${HOME}/github
     echo "$GREEN OK $DEFAULT GitHub directory found at: ${GITHUB_DIRECTORY}"
elif [ -d "${HOME}/git/github" ]; then
     GITHUB_DIRECTORY=${HOME}/github
     echo "$GREEN OK $DEFAULT GitHub directory found at: ${GITHUB_DIRECTORY}"
else 
    echo "$YELLOW WARN $DEFAULT Could not find your github directory. This is sub optimal."
fi

if [ -e "$HOME/.ansiblerc" ]; then
    source "$HOME/.ansiblerc"
fi

if [ -e "$HOME/.fzf.bash" ]; then
    source "$HOME/.fzf.bash"
fi

if [ -e "$HOME/.azure.completion" ]; then
    source "$HOME/.azure.completion"
fi

# brew install bash-completion
[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion

[ -f /usr/local/bin/kubectl ] && source <(kubectl completion bash)

# Ensure en_US.UTF-8 locale is always available and configured
ensure_utf8_locale() {
    local LOCALE="en_US.UTF-8"
    if ! locale -a | grep -qi "$(echo ${LOCALE} | sed 's/-//')"; then
        echo "Locale ${LOCALE} missing."
        read -p "Do you want to generate ${LOCALE}? [y/N]: " confirm
        if [[ ! $confirm =~ ^[Yy]$ ]]; then
            echo "Locale generation aborted."
            return
        fi

        if [ -x "$(command -v locale-gen)" ]; then
            sudo locale-gen ${LOCALE}
        elif [ -x "$(command -v localedef)" ]; then
            sudo localedef -v -c -i en_US -f UTF-8 ${LOCALE}
        else
            echo "No supported locale generation command found (locale-gen/localedef)."
            return
        fi

        echo "Locale ${LOCALE} generated."
    else
        echo "Locales are OK: ${LOCALE} is already configured."
    fi
    export LANG=${LOCALE}
    export LOCALE=${LOCALE}
    unset LC_ALL
}

ensure_utf8_locale



# common settings
# big hist file is good for lazy (or forgetful) admins
HISTFILESIZE=20000
HISTSIZE=20000
# add timestamps to history entries
HISTTIMEFORMAT="[ %d.%m.%y %T ] "
# no point in saving dupes
HISTCONTROL=ignoredups
PS1='[\u@\h \w]\$ '

if [ -d /opt/libressl/lib ]; then
    export LD_LIBRARY_PATH=/opt/libressl/lib
fi

if [ -d "${HOME}/bin" ]; then
    PATH=${HOME}/bin:$PATH
fi

if [ -d "${HOME}/.local/bin" ]; then
    PATH=${HOME}/.local/bin:$PATH
fi

if [ -d "${HOME}/opt/bin" ]; then
    PATH=${HOME}/opt/bin:$PATH
fi

if [ -d "${HOME}/.cargo/bin" ]; then
    PATH=${HOME}/.cargo/bin:$PATH
fi

if [ -d "/opt/bin" ]; then
    PATH=/opt/bin:$PATH
fi

# if it exists, add ${HOME}/opt/bin to path 
if [ -d "${HOME}/opt/bin" ]; then
    PATH=${HOME}/opt/bin:$PATH
fi


export PATH

if [ "$OSTYPE" == "freebsd11.0" ] || [ "$OSTYPE" == "freebsd10.1" ]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        print_warn "Please consider installing 'most' or 'less'"
    fi
elif [ "$OSTYPE" == "linux-gnu" ]; then
    if [ -x /usr/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        print_warn "Please consider installing 'most' or 'less'"
    fi
elif [ "$OSTYPE" == "darwin18" ]; then
    if [ -x /usr/local/bin/most ]; then
        export PAGER=most
    elif [ -x /usr/bin/less ]; then
        export PAGER=less
    else
        print_warn "Please consider installing 'most' or 'less'"
    fi
fi
export HISTFILESIZE HISTSIZE HISTTIMEFORMAT PS1
# some basic env variables
export VAGRANT_DEFAULT_PROVIDER=virtualbox
export EDITOR="vim"






ssh-add -l
if [ "$?" != 0 ]; then
    echo "$YELLOW WARN $DEFAULT SSH agent has no keys loaded."
    

    # make sure ssh-agent is running and is being used
    if ! pgrep ssh-agent > /dev/null 2>&1; then
        echo "$YELLOW WARN $DEFAULT ssh agent not running, let's start it up"
        eval $(ssh-agent -s)
    else
        # There should be only one ssh-agent running
        ssh_agent_count=$(pgrep -x ssh-agent | wc -l)
        if (( ssh_agent_count > 1)); then
            echo "$YELLOW WARN $DEFAULT Too many ssh agents running!"
        else
            export SSH_AGENT_PID=$(pgrep ssh-agent)
        fi
    fi 

    if [ -e "$SSH_AUTH_SOCK" ]; then
        if [[ -e ~/.ssh/ssh_auth_sock ]]; then 
            echo "$GREEN OK $DEFAULT SSH_AUTH_SOCK is OK"
        else
            echo "Setting up SSH_AUTH_SOCK"
            ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
        fi
    fi



    if [ -n "$SSH_AGENT_PID" ]; then
        if ssh-add -L > /dev/null; then
            echo "$GREEN OK $DEFAULT SSH key already loaded"
        else
            echo "Adding ssh key to ssh-agent"
            if ! ssh-add; then
                echo "$RED ERROR $DEFAULT Failed to add SSH key to ssh-agent. Please check your SSH key and try again."
            fi
        fi
    else
        echo "$YELLOW WARN $DEFAULT SSH_AGENT_PID variable does not exist"
    fi
else
    echo "$GREEN OK $DEFAULT SSH agent has keys loaded"
fi



# setup golang environment
if type go > /dev/null 2> /dev/null; then
    export GOPATH=$HOME/golang
    if [ ! -e "$GOPATH" ]; then
        echo "Your GOPATH is missing, so I will create it"
        mkdir "$GOPATH"
    fi
    echo "Setting up \$GOPATH to $GOPATH"
fi


if [ -e "$HOME/.bash_mac" ]; then
    source "$HOME/.bash_mac"
    print_ok ".bash_mac loaded"
fi



chmod -v 0640 ~/.ssh/config
mkdir -p  ~/.ssh/cm/

# check if sudo session is already active
# this makes sense on machines where /etc/sudoers has timestamp_type="global"
if sudo -vn 2> /dev/null; then
    echo "You have an active sudo session"
fi




# end of tty conditional
fi

if [ -e /home/fx/.config/broot ]; then
    source /home/fx/.config/broot/launcher/bash/br
else
    echo "$YELLOW WARN $DEFAULT >>> Install broot from https://github.com/Canop/broot"
fi


if [ -e $HOME/.cargo/env ]; then 
    . "$HOME/.cargo/env"
fi

if [ -e $HOME/.extrarc ]; then 
    . "$HOME/.extrarc"
fi

if [ -e $HOME/opt/bin/direnv ] || [ -e /usr/bin/direnv ]; then
    echo "Direnv is present"
    eval "$(direnv hook bash)"
fi

if [ -e /etc/bash_completion.d/azure-cli ]; then
    source /etc/bash_completion.d/azure-cli
else
    echo "$YELLOW WARN $DEFAULT >>> Azure CLI bash completion not found"
fi
